Data Analytics II
1. Implement logistic regression using Python/R to perform classification on 
Social_Network_Ads.csv dataset.
2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall 
on the given dataset.


#importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,classification_report,accuracy_score, precision_score, recall_score, f1_score


df =  pd.read_csv('/content/Social_Network_Ads.csv')
df.head(5)


df.info()

#checking basix statistics of thee data

df.describe()


#checking NAN values

df.isnull().sum()


#displaying dimensions of the datset
df.shape()


#Loading 'Age', 'Estimated_salary' as the features in 'x' and 'Purchased' as the target variable in 'y'
x = data.iloc[:,2:4]
y = data.iloc[:,4]


#splitting data into 75%trainig an d25% testing data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)


#using standard scaler to standardize the values
scale = StandardScaler()
x_train = scale.fit_transform(x_train)
x_test = scale.transform(x_test)



#Preparing and trainig our Logistic Regression model with training and testing data
lr = LogisticRegression(random_state = 0,solver = 'lbfgs')
lr.fit(x_train,y_train)
pred = lr.predict(x_test)
       
print(x_test[:10])
print('-'*15)
print(pred[:10])







print('Expected Output:',pred[:10])
print('-'*15)
print('Predicted Output:\n',y_test[:10])




# Evaluating model based on Confusion Matrix
matrix = confusion_matrix(y_test,pred,labels = lr.classes_)
print(matrix)

tp, fn, fp, tn = confusion_matrix(y_test,pred,labels=[1,0]).reshape(-1)



conf_matrix = ConfusionMatrixDisplay(confusion_matrix=matrix,display_labels=lr.classes_)
conf_matrix.plot(cmap=plt.cm.Blues)
plt.show()


# Determing accuracy,error rate,Recall and Precison of the model
print(classification_report(y_test,pred))


print('\nAccuracy: {:.2f}'.format(accuracy_score(y_test,pred)))
print('Error Rate: ',(fp+fn)/(tp+tn+fn+fp))
print('Sensitivity (Recall or True positive rate) :',tp/(tp+fn))
print('Specificity (True negative rate) :',tn/(fp+tn))
print('Precision (Positive predictive value) :',tp/(tp+fp))
print('False Positive Rate :',fp/(tn+fp))






